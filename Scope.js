// Generated by CoffeeScript 1.7.1
var Scope;

Scope = (function() {
  function Scope(scopeId, shell, balloon) {
    this.scopeId = scopeId;
    this.shell = shell;
    this.balloon = balloon;
    this.$scope = $("<div />").addClass("scope").css({
      "bottom": "0px",
      "right": (this.scopeId * 240) + "px"
    });
    this.$style = $("<style scoped />").html(".scope {\n  position: absolute;\n  border: none;\n  margin: 0px;\n  padding: 0px;\n  -webkit-user-select: none;\n  -webkit-tap-highlight-color: transparent;\n}");
    this.$surface = $("<div />").addClass("surface").hide();
    this.$balloon = $("<div />").addClass("balloon").hide();
    this.$scope.append(this.$surface).append(this.$balloon).append(this.$style);
    this.element = this.$scope[0];
    this.currentSurface = null;
    this.currentBalloon = null;
  }

  Scope.prototype.surface = function(surfaceId) {
    if (surfaceId === -1) {
      this.$surface.hide();
    } else {
      this.$surface.show();
    }
    if (surfaceId !== void 0) {
      if (!!this.currentSurface) {
        this.currentSurface.destructor();
      }
      if (!!this.currentSurface) {
        $(this.currentSurface.element).remove();
      }
      this.currentSurface = this.shell.getSurface(this.scopeId, surfaceId);
      if (!!this.currentSurface) {
        this.$surface.append(this.currentSurface.element);
      }
    }
    return this.currentSurface;
  };

  Scope.prototype.blimp = function(balloonId) {
    if (balloonId === -1) {
      this.$balloon.hide();
    } else {
      this.$balloon.show();
    }
    if (balloonId !== void 0) {
      if (!!this.currentBalloon) {
        this.currentBalloon.destructor();
      }
      if (!!this.currentBalloon) {
        $(this.currentBalloon.element).remove();
      }
      this.currentBalloon = this.balloon.getSurface(this.scopeId, balloonId);
      if (!!this.currentBalloon) {
        this.$balloon.append(this.currentBalloon.element);
      }
    }
    return this.currentBalloon;
  };

  return Scope;

})();


/*
class Balloon
  constructor: (tree)->
    @$balloon = $("<div />")
      .addClass("box")
    @$style = $("<style scoped />")
      .html("""
        .box {
          position: absolute;
          top: -150px;
          left: 0px;
          height: 150px;
          width: 280px;
          background: #ccc;
          overflow-y: scroll;
          white-space: pre;
          white-space: pre-wrap;
          white-space: pre-line;
          word-wrap: break-word;
        }
        .text {
          padding: 1em;
        }
        .anchor,
        .select {
          color:red;
          cursor:pointer;
        }
        .anchor:hover,
        .select:hover {
          background-color:violet;
        }
      """)
    @$text = $("<div />")
      .addClass("text")
    @$balloon
      .append(@$style)
      .append(@$text)
    @element = @$balloon[0]
  talk: (text)->
    @$text.html(@$text.html() + text)
    undefined
  clear: ->
    @$text.html("")
    undefined
  br: ->
    @talk("<br />")
    undefined
 */
