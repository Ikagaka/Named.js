// Generated by CoffeeScript 1.10.0
(function() {
  var SurfaceUtil, eventPropagationSim, recursiveElementFromPoint;

  SurfaceUtil = require("ikagaka.shell.js").SurfaceUtil;

  recursiveElementFromPoint = function(ev, parent, target) {
    var clientX, clientY, left, offsetX, offsetY, pageX, pageY, ref, ref1, result, tmp, top, under;
    ref = SurfaceUtil.getEventPosition(ev), clientX = ref.clientX, clientY = ref.clientY, pageX = ref.pageX, pageY = ref.pageY;
    ref1 = $(target).offset(), left = ref1.left, top = ref1.top;
    offsetX = clientX - (left - window.scrollX);
    offsetY = clientY - (top - window.scrollY);
    if ($(parent).find(target).length > 0 && target instanceof HTMLCanvasElement && SurfaceUtil.isHit(target, offsetX, offsetY)) {
      eventPropagationSim(target, ev);
      return target;
    }
    tmp = target.style.display;
    target.style.display = "none";
    under = document.elementFromPoint(clientX, clientY);
    if (under == null) {
      target.style.display = tmp;
      return null;
    }
    if ($(parent).find(under).length > 0) {
      result = recursiveElementFromPoint(ev, parent, under);
      target.style.display = tmp;
      return result;
    }
    eventPropagationSim(under, ev);
    target.style.display = tmp;
    return under;
  };

  eventPropagationSim = function(target, ev) {
    var clientX, clientY, mev, pageX, pageY, ref, screenX, screenY, tev, touch, touches, ua;
    ev.preventDefault();
    ev.stopPropagation();
    if (/^mouse|click$/.test(ev.type)) {
      mev = new MouseEvent(ev.type, {
        screenX: ev.screenX,
        screenY: ev.screenY,
        clientX: ev.clientX,
        clientY: ev.clientY,
        ctrlKey: ev.ctrlKey,
        altKey: ev.altKey,
        shiftKey: ev.shiftKey,
        metaKey: ev.metaKey,
        button: ev.button,
        buttons: ev.originalEvent["buttons"],
        relatedTarget: ev.relatedTarget,
        view: ev.originalEvent["view"],
        detail: ev.originalEvent["detail"],
        bubbles: true
      });
      return target.dispatchEvent(mev);
    } else if (/^touch/.test(ev.type)) {
      ua = window.navigator.userAgent.toLowerCase();
      if (!(document.createTouch instanceof Function)) {
        return console.warn(ua, "does not support document.createTouch");
      }
      if (!(document.createTouchList instanceof Function)) {
        return console.warn(ua, "does not support document.createTouchList");
      }
      if (!(tev["initTouchEvent"] instanceof Function)) {
        return console.warn(ua, "does not support TouchEvent#initTouchEvent");
      }
      ref = SurfaceUtil.getEventPosition(ev), pageX = ref.pageX, pageY = ref.pageY, clientX = ref.clientX, clientY = ref.clientY, screenX = ref.screenX, screenY = ref.screenY;
      tev = document.createEvent("TouchEvent");
      touch = document.createTouch(document.defaultView, ev.target, 0, pageX, pageY, screenX, screenY);
      touches = document.createTouchList(touch);
      if (ua.indexOf('chrome') !== -1 || ua.indexOf('opera') !== -1) {
        console.info("this browser is chrome or opera", ua);
        tev["initTouchEvent"](touches, touches, touches, ev.type, ev.originalEvent["view"], screenX, screenY, clientX, clientY, ev.ctrlKey, ev.altKey, ev.shiftKey, ev.metaKey);
      } else if (ua.indexOf('safari') !== -1) {
        console.info("this browser is safari", ua);
        tev["initTouchEvent"](ev.type, true, ev.cancelable, ev.originalEvent["view"], ev.originalEvent["detail"], screenX, screenY, clientX, clientY, ev.ctrlKey, ev.altKey, ev.shiftKey, ev.metaKey, touches, touches, touches, 0, 0);
      } else if (ua.indexOf('firefox') !== -1 || true) {
        console.info("this browser is firefox", ua);
        tev["initTouchEvent"](ev.type, true, ev.cancelable, ev.originalEvent["view"], ev.originalEvent["detail"], ev.ctrlKey, ev.altKey, ev.shiftKey, ev.metaKey, touches, touches, touches);
      }
      return target.dispatchEvent(tev);
    } else {
      return console.warn(ev.type, "is not support event");
    }
  };

  exports.recursiveElementFromPoint = recursiveElementFromPoint;

  exports.eventPropagationSim = eventPropagationSim;

}).call(this);
