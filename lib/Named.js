// Generated by CoffeeScript 1.10.0
(function() {
  var $, EventEmitter, Named, Scope, SurfaceUtil, recursiveElementFromPoint,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  recursiveElementFromPoint = require("./LayerUtil").recursiveElementFromPoint;

  SurfaceUtil = require("ikagaka.shell.js").SurfaceUtil;

  Scope = require("./Scope");

  EventEmitter = require("eventemitter3");

  $ = require("./Menu")(require("jquery"));

  Named = (function(superClass) {
    extend(Named, superClass);

    function Named(namedId, shell, balloon, nmdmgr) {
      this.namedId = namedId;
      this.shell = shell;
      this.balloon = balloon;
      this.nmdmgr = nmdmgr;
      Named.__super__.constructor.call(this);
      this.element = document.createElement("div");
      this.scopes = [];
      this.currentScope = null;
      this.destructors = [];
      this.contextmenuHandler = null;
      this.initDOMStructure();
      this.initEventListener();
      this.initDefaultSurface();
    }

    Named.prototype.initDOMStructure = function() {
      this.$named = $(this.element).addClass("named").attr("namedId", this.namedId);
    };

    Named.prototype.initEventListener = function() {
      this.initContextMenuEvent();
      this.initShellMouseEvent();
      this.initBalloonMouseEvent();
      this.initBalloonSelectEvent();
      return this.initFileDropEvent();
    };

    Named.prototype.initDefaultSurface = function() {
      this.scope(0).surface(0);
      return this.scope(1).surface(10);
    };

    Named.prototype.initContextMenuEvent = function() {
      $.contextMenu({
        selector: ".namedMgr .named[namedId=" + this.namedId + "] .context-menu",
        build: (function(_this) {
          return function($trigger, ev) {
            var scopeId;
            ev.preventDefault();
            scopeId = $trigger.attr("scopeId");
            if (_this.contextmenuHandler != null) {
              return _this.contextmenuHandler({
                type: "contextmenu",
                scopeId: scopeId,
                scope: scopeId,
                event: ev
              });
            } else {
              return {
                items: {
                  sep1: "---"
                }
              };
            }
          };
        })(this)
      });
      this.destructors.push((function(_this) {
        return function() {
          return _this.$named.find(".context-menu").contextMenu("destroy");
        };
      })(this));
    };

    Named.prototype.initShellMouseEvent = function() {
      var $target, onmousemove, onmouseup, relLeft, relTop, scopeId;
      relLeft = relTop = 0;
      $target = null;
      scopeId = -1;
      onmouseup = (function(_this) {
        return function() {
          $target = null;
          return scopeId = -1;
        };
      })(this);
      onmousemove = (function(_this) {
        return function(ev) {
          var $element, alignment, bottom, clientX, clientY, pageX, pageY, ref, right;
          if ($target == null) {
            return;
          }
          $element = $(_this.scopes[scopeId].element);
          ref = SurfaceUtil.getEventPosition(ev), pageX = ref.pageX, pageY = ref.pageY, clientX = ref.clientX, clientY = ref.clientY;
          right = window.innerWidth - clientX - ($element.width() - relLeft);
          bottom = window.innerHeight - clientY - ($element.height() - relTop);
          alignment = _this.shell.descript["seriko.alignmenttodesktop"] || _this.shell.descript[(SurfaceUtil.scope(scopeId)) + ".alignmenttodesktop"] || "bottom";
          switch (alignment) {
            case "free":
              break;
            case "top":
              console.warn("seriko.alignmenttodesktop, free", "have not been supported yet");
              break;
            case "bottom":
              bottom = 0;
              break;
          }
          return $target.css({
            right: right,
            bottom: bottom,
            top: "",
            left: ""
          });
        };
      })(this);
      $(document.body).on("mouseup", onmouseup);
      $(document.body).on("mousemove", onmousemove);
      $(document.body).on("touchmove", onmousemove);
      $(document.body).on("touchend", onmouseup);
      this.destructors.push((function(_this) {
        return function() {
          $(document.body).off("mouseup", onmouseup);
          $(document.body).off("mousemove", onmousemove);
          $(document.body).off("touchmove", onmousemove);
          $(document.body).off("touchend", onmouseup);
          return _this.shell.off("mouse");
        };
      })(this));
      this.shell.on("mouse", (function(_this) {
        return function(ev) {
          var $scope, clientX, clientY, left, pageX, pageY, ref, ref1, ref2, scrollX, scrollY, top;
          _this.$named.find(".context-menu").contextMenu(false);
          if (ev.transparency === true && ev.type !== "mousemove") {
            ev.event.preventDefault();
            recursiveElementFromPoint(ev.event, _this.nmdmgr.element, ev.event.target);
            return;
          }
          switch (ev.button) {
            case 1:
              switch (ev.type) {
                case "mousedown":
                  _this.$named.find(".context-menu").contextMenu(true);
                  $(".namedMgr .named[namedId=" + _this.namedId + "] .scope[scopeId=" + ev.scopeId + "] .context-menu").trigger($.Event('contextmenu', {
                    data: ev.event.data,
                    pageX: ev.event.pageX,
                    pageY: ev.event.pageY
                  }));
                  _this.$named.find(".context-menu").contextMenu(false);
              }
              break;
            case 0:
              switch (ev.type) {
                case "mousedown":
                  scopeId = ev.scopeId;
                  $target = $scope = $(_this.scopes[ev.scopeId].element);
                  ref = $target.offset(), top = ref.top, left = ref.left;
                  ref1 = SurfaceUtil.getEventPosition(ev.event), pageX = ref1.pageX, pageY = ref1.pageY, clientX = ref1.clientX, clientY = ref1.clientY;
                  ref2 = SurfaceUtil.getScrollXY(), scrollX = ref2.scrollX, scrollY = ref2.scrollY;
                  relLeft = clientX - (left - scrollX);
                  relTop = clientY - (top - scrollY);
                  if ($(_this.element).children().last()[0] !== $scope[0]) {
                    _this.$named.append($scope);
                  }
                  if ($(_this.nmdmgr.element).children().last()[0] !== _this.element) {
                    _this.$named.appendTo(_this.nmdmgr.element);
                  }
              }
          }
          ev.scope = ev.scopeId;
          _this.emit(ev.type, ev);
        };
      })(this));
    };

    Named.prototype.initBalloonMouseEvent = function() {
      var $target, onmousemove, onmouseup, relLeft, relTop, scopeId;
      relLeft = relTop = 0;
      $target = null;
      scopeId = -1;
      onmouseup = (function(_this) {
        return function() {
          $target = null;
          return scopeId = -1;
        };
      })(this);
      onmousemove = (function(_this) {
        return function(ev) {
          var $scope, clientX, clientY, pageX, pageY, ref, screenX, screenY;
          if ($target == null) {
            return;
          }
          ref = SurfaceUtil.getEventPosition(ev), pageX = ref.pageX, pageY = ref.pageY, clientX = ref.clientX, clientY = ref.clientY, screenX = ref.screenX, screenY = ref.screenY;
          $scope = $(_this.scopes[scopeId].element);
          if (pageX - relLeft + $scope.width() / 2 > 0) {
            _this.scope(scopeId).blimp().right();
          } else {
            _this.scope(scopeId).blimp().left();
          }
          return $target.css({
            left: pageX - relLeft,
            top: pageY - relTop,
            right: "",
            bottom: ""
          });
        };
      })(this);
      $(document.body).on("mouseup", onmouseup);
      $(document.body).on("mousemove", onmousemove);
      $(document.body).on("touchmove", onmousemove);
      $(document.body).on("touchend", onmouseup);
      this.destructors.push((function(_this) {
        return function() {
          $(document.body).off("mouseup", onmouseup);
          $(document.body).off("mousemove", onmousemove);
          $(document.body).off("touchmove", onmousemove);
          $(document.body).off("touchend", onmouseup);
          console.log(_this);
          return _this.balloon.off("mouse");
        };
      })(this));
      this.balloon.on("mouse", (function(_this) {
        return function(ev) {
          var $scope, clientX, clientY, left, offsetX, offsetY, pageX, pageY, ref, ref1, screenX, screenY, top;
          switch (ev.event.button) {
            case 0:
              $scope = $(_this.scopes[ev.scopeId].element);
              switch (ev.type) {
                case "mousedown":
                  scopeId = ev.scopeId;
                  $scope = $(_this.scopes[ev.scopeId].element);
                  $target = $scope.find(".blimp");
                  ref = $target.offset(), top = ref.top, left = ref.left;
                  offsetY = parseInt($target.css("left"), 10);
                  offsetX = parseInt($target.css("top"), 10);
                  ref1 = SurfaceUtil.getEventPosition(ev.event), pageX = ref1.pageX, pageY = ref1.pageY, clientX = ref1.clientX, clientY = ref1.clientY, screenX = ref1.screenX, screenY = ref1.screenY;
                  relLeft = pageX - offsetY;
                  relTop = pageY - offsetX;
                  if ($(_this.element).children().last()[0] !== $scope[0]) {
                    _this.$named.append($scope);
                  }
                  if ($(_this.nmdmgr.element).children().last()[0] !== _this.element) {
                    _this.$named.appendTo(_this.nmdmgr.element);
                  }
              }
          }
          ev.scope = ev.scopeId;
          switch (ev.type) {
            case "click":
              ev.type = "balloonclick";
              _this.emit("balloonclick", ev);
              break;
            case "dblclick":
              ev.type = "balloondblclick";
              _this.emit("balloondblclick", ev);
          }
        };
      })(this));
    };

    Named.prototype.initBalloonSelectEvent = function() {
      this.balloon.on("select", (function(_this) {
        return function(ev) {
          ev.scope = ev.scopeId;
          switch (ev.type) {
            case "choiceselect":
              _this.emit("choiceselect", ev);
              break;
            case "anchorselect":
              _this.emit("anchorselect", ev);
          }
        };
      })(this));
      this.destructors.push((function(_this) {
        return function() {
          return _this.balloon.off("select");
        };
      })(this));
    };

    Named.prototype.initFileDropEvent = function() {
      var that;
      that = this;
      this.$named.on("dragenter", function(ev) {
        ev.preventDefault();
        return ev.stopPropagation();
      });
      this.$named.on("dragleave", function(ev) {
        ev.preventDefault();
        return ev.stopPropagation();
      });
      this.$named.on("dragover", function(ev) {
        var scopeId;
        ev.preventDefault();
        ev.stopPropagation();
        scopeId = Number($(this).attr("scopeId"));
        return that.emit("filedropping", {
          type: "filedropping",
          scopeId: scopeId,
          scope: scopeId,
          event: ev
        });
      });
      this.$named.on("drop", ".scope", function(ev) {
        var scopeId;
        ev.preventDefault();
        ev.stopPropagation();
        scopeId = Number($(this).attr("scopeId"));
        return that.emit("filedrop", {
          type: "filedrop",
          scopeId: scopeId,
          scope: scopeId,
          event: ev
        });
      });
      this.destructors.push((function(_this) {
        return function() {
          _this.$named.off("dragenter");
          _this.$named.off("dragleave");
          _this.$named.off("dragover");
          return _this.$named.off("drop");
        };
      })(this));
    };

    Named.prototype.destructor = function() {
      this.destructors.forEach(function(fn) {
        return fn();
      });
      this.scopes.forEach(function(scope) {
        return scope.destructor();
      });
      this.scopes = [];
      this.contextmenuHandler = null;
      this.$named.children().remove();
      this.$named.remove();
    };

    Named.prototype.load = function() {
      return Promise.resolve(this);
    };

    Named.prototype.scope = function(scopeId) {
      if (scopeId == null) {
        if (this.currentScope instanceof Scope) {
          return this.currentScope;
        } else {
          console.error("Named#scope", "currentScope has not been defined yet, failback to scope 0", scopeId, this.currentScope, this);
          return this.currentScope = this.scopes[0];
        }
      }
      if (typeof scopeId !== "number") {
        console.warn("scopeId:", scopeId, "is not a number");
        return this.currentScope;
      }
      if (this.scopes[scopeId] == null) {
        this.scopes[scopeId] = new Scope(scopeId, this.shell, this.balloon, this);
      }
      this.currentScope = this.scopes[scopeId];
      this.$named.append(this.scopes[scopeId].element);
      return this.currentScope;
    };

    Named.prototype.changeShell = function(shell) {
      this.shell = shell;
      return this.reload();
    };

    Named.prototype.changeBalloon = function(balloon) {
      this.balloon = balloon;
      return this.reload();
    };

    Named.prototype.reload = function() {
      var _contextmenuHandler, args, positions;
      args = [this.namedId, this.shell, this.balloon, this.nmdmgr];
      positions = this.scopes.map(function(scope) {
        return scope.position();
      });
      _contextmenuHandler = this.contextmenuHandler;
      this.destructor();
      this.constructor.apply(this, args);
      positions.forEach((function(_this) {
        return function(pos, i) {
          _this.scope(i).surface(i === 0 ? 0 : 10);
          console.log(pos, i);
          return _this.scope(i).position(pos);
        };
      })(this));
      this.contextmenuHandler = _contextmenuHandler;
      return this.nmdmgr.$namedMgr.append(this.element);
    };

    Named.prototype.openInputBox = function(id, text) {
      var event;
      if (text == null) {
        text = "";
      }
      event = {
        "type": "userinput",
        "id": id,
        "content": prompt("UserInput", text)
      };
      this.emit("userinput", event);
    };

    Named.prototype.openCommunicateBox = function(text) {
      var event;
      if (text == null) {
        text = "";
      }
      event = {
        "type": "communicateinput",
        "sender": "user",
        "content": prompt("Communicate", text)
      };
      this.emit("communicateinput", event);
    };

    Named.prototype.contextmenu = function(contextmenuHandler) {
      this.contextmenuHandler = contextmenuHandler;
    };

    return Named;

  })(EventEmitter);

  module.exports = Named;

}).call(this);
