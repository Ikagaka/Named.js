// Generated by CoffeeScript 1.10.0
(function() {
  var Named, Scope,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Scope = require("./Scope").Scope;

  Named = (function(superClass) {
    extend(Named, superClass);

    function Named(namedId, shell, balloon, nmdmgr) {
      this.namedId = namedId;
      this.shell = shell;
      this.balloon = balloon;
      this.nmdmgr = nmdmgr;
      Named.__super__.constructor.call(this);
      this.element = document.createElement("div");
      this.scopes = [];
      this.currentScope = null;
      this.destructors = [];
      this.initDOMStructure();
      this.initEventListener();
      this.scope(0).surface(0);
      this.scope(1).surface(10);
      Promise.resolve(this);
    }

    Named.prototype.initDOMStructure = function() {
      this.$named = $(this.element).addClass("named");
    };

    Named.prototype.initEventListener = function() {
      var $body, $target, onmousedown, onmousemove, onmouseup, relLeft, relTop;
      $target = null;
      relLeft = relTop = 0;
      onmouseup = (function(_this) {
        return function(ev) {
          var ref, ref1;
          if (!!$target) {
            if ($(ev.target).hasClass("blimpText") || $(ev.target).hasClass("blimpCanvas")) {
              if ($target[0] === ((ref = $(ev.target).parent()) != null ? ref[0] : void 0)) {
                return $target = null;
              }
            } else if ($(ev.target).hasClass("surfaceCanvas")) {
              if ($target[0] === ((ref1 = $(ev.target).parent().parent()) != null ? ref1[0] : void 0)) {
                return $target = null;
              }
            }
          }
        };
      })(this);
      onmousedown = (function(_this) {
        return function(ev) {
          var $scope, left, offsetX, offsetY, pageX, pageY, ref, ref1, ref2, ref3, top;
          if ($(ev.target).hasClass("blimpText") || $(ev.target).hasClass("blimpCanvas")) {
            if (((ref = $(ev.target).parent().parent().parent()) != null ? ref[0] : void 0) === _this.element) {
              $target = $(ev.target).parent();
              $scope = $target.parent();
              ref1 = $target.offset(), top = ref1.top, left = ref1.left;
              offsetY = parseInt($target.css("left"), 10);
              offsetX = parseInt($target.css("top"), 10);
              if (/^touch/.test(ev.type)) {
                pageX = ev.touches[0].pageX;
                pageY = ev.touches[0].pageY;
              } else {
                pageX = ev.pageX;
                pageY = ev.pageY;
              }
              relLeft = pageX - offsetY;
              relTop = pageY - offsetX;
              return setTimeout((function() {
                return _this.$named.append($scope);
              }), 200);
            }
          } else if ($(ev.target).hasClass("surfaceCanvas")) {
            if (((ref2 = $(ev.target).parent().parent().parent()) != null ? ref2[0] : void 0) === _this.element) {
              $scope = $target = $(ev.target).parent().parent();
              ref3 = $target.offset(), top = ref3.top, left = ref3.left;
              if (/^touch/.test(ev.type)) {
                pageX = ev.touches[0].pageX;
                pageY = ev.touches[0].pageY;
              } else {
                pageX = ev.pageX;
                pageY = ev.pageY;
              }
              relLeft = pageX - left;
              relTop = pageY - top;
              return setTimeout((function() {
                return _this.$named.append($scope);
              }), 200);
            }
          }
        };
      })(this);
      onmousemove = (function(_this) {
        return function(ev) {
          var pageX, pageY;
          if (!!$target) {
            if (/^touch/.test(ev.type)) {
              pageX = ev.touches[0].pageX;
              pageY = ev.touches[0].pageY;
            } else {
              pageX = ev.pageX;
              pageY = ev.pageY;
            }
            return $target.css({
              left: pageX - relLeft,
              top: pageY - relTop
            });
          }
        };
      })(this);
      $body = $("body");
      $body.on("mousedown", onmousedown);
      $body.on("mousemove", onmousemove);
      $body.on("mouseup", onmouseup);
      $body.on("touchstart", onmousedown);
      $body.on("touchmove", onmousemove);
      $body.on("touchend", onmouseup);
      this.destructors.push(function() {
        $body.off("mousedown", onmousedown);
        $body.off("mousemove", onmousemove);
        $body.off("mouseup", onmouseup);
        $body.off("touchstart", onmousedown);
        $body.off("touchmove", onmousemove);
        return $body.off("touchend", onmouseup);
      });
    };

    Named.prototype.destructor = function() {
      this.scopes.forEach(function(scope) {
        return scope.destructor();
      });
      this.scopes = [];
      this.destructors.forEach(function(fn) {
        return fn();
      });
      this.$named.children().remove();
      this.$named.remove();
    };

    Named.prototype.scope = function(scopeId) {
      if (scopeId == null) {
        return this.currentScope;
      }
      if (typeof scopeId !== "number") {
        console.warn("scopeId:", scopeId, "is not a number");
        return this.currentScope;
      }
      if (this.scopes[scopeId] == null) {
        this.scopes[scopeId] = new Scope(scopeId, this.shell, this.balloon, this);
      }
      this.currentScope = this.scopes[scopeId];
      this.$named.append(this.scopes[scopeId].element);
      return this.currentScope;
    };

    Named.prototype.openInputBox = function(id, text) {
      var event;
      if (text == null) {
        text = "";
      }
      event = {
        "type": "userinput",
        "id": id,
        "content": prompt("UserInput", text)
      };
      this.emit(event.type, event);
    };

    Named.prototype.openCommunicateBox = function(text) {
      var event;
      if (text == null) {
        text = "";
      }
      event = {
        "type": "communicateinput",
        "sender": "user",
        "content": prompt("Communicate", text)
      };
      this.emit(event.type, event);
    };

    return Named;

  })(EventEmitter2);

  exports.Named = Named;

}).call(this);
