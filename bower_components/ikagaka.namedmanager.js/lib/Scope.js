// Generated by CoffeeScript 1.10.0
(function() {
  var Scope, SurfaceUtil;

  SurfaceUtil = require("ikagaka.shell.js").SurfaceUtil;

  Scope = (function() {
    function Scope(scopeId, shell, balloon, named) {
      this.scopeId = scopeId;
      this.shell = shell;
      this.balloon = balloon;
      this.named = named;
      this.element = document.createElement("div");
      this.currentSurface = null;
      this.currentBlimp = null;
      this.type = this.scopeId === 0 ? "sakura" : "kero";
      this.initDOMStructure();
      this.initSurface();
    }

    Scope.prototype.initDOMStructure = function() {
      this.$scope = $(this.element).addClass("scope");
      this.$surface = $("<div />").addClass("surface").appendTo(this.$scope);
      this.$surfaceCanvas = $("<canvas width='10' height='100' />").addClass("surfaceCanvas").appendTo(this.$surface);
      this.$blimp = $("<div />").addClass("blimp").appendTo(this.$scope);
      this.$scope.css({
        "bottom": "0px",
        "right": (this.scopeId * 240) + "px"
      });
    };

    Scope.prototype.initSurface = function() {
      this.currentBlimp = this.balloon.attachBlimp(this.$blimp[0], this.scopeId, 0);
      this.surface(0);
      this.blimp(0);
      this.surface(-1);
      this.blimp(-1);
    };

    Scope.prototype.destructor = function() {};

    Scope.prototype.surface = function(surfaceId) {
      if (surfaceId == null) {
        return this.currentSurface;
      }
      if (Number(surfaceId) < 0) {
        this.$surface.hide();
        return this.currentSurface;
      }
      if (!this.shell.hasSurface(this.scopeId, surfaceId)) {
        console.warn("Scope#surface > ReferenceError: surfaceId", surfaceId, "is not defined");
        return this.currentSurface;
      }
      this.shell.detachSurface(this.$surfaceCanvas[0]);
      this.currentSurface = this.shell.attachSurface(this.$surfaceCanvas[0], this.scopeId, surfaceId);
      this.$scope.width(this.$surfaceCanvas[0].width);
      this.$scope.height(this.$surfaceCanvas[0].height);
      this.$surface.show();
      return this.currentSurface;
    };

    Scope.prototype.blimp = function(balloonId) {
      if (balloonId == null) {
        return this.currentBlimp;
      }
      if (Number(balloonId) < 0) {
        this.$blimp.hide();
        return this.currentBlimp;
      }
      if (balloonId != null) {
        this.$blimp.show();
        this.$blimp.css({
          top: Number(this.shell.descript[this.type + ".balloon.offsety"] || 0)
        });
        if (this.currentBlimp.isBalloonLeft) {
          this.$blimp.css({
            left: Number(this.shell.descript[this.type + ".balloon.offsetx"] || 0) + -1 * this.$blimp.width()
          });
        } else {
          this.$blimp.css({
            left: Number(this.shell.descript[this.type + ".balloon.offsetx"] || 0) + this.$surfaceCanvas[0].width
          });
        }
      }
    };

    return Scope;

  })();

  exports.Scope = Scope;

}).call(this);
